/*
 * File:   Master11.c
 * Author: Irenne Cruz
 *
 * Creado: 11 de mayo, 2022
 * Ultima modificaci처n: 11 de mayo, 2022
 * 
 */

// PIC16F887 Configuration Bit Settings
// 'C' source line config statements
// CONFIG1
#pragma config FOSC = INTRC_NOCLKOUT// Oscillator Selection bits (INTOSCIO oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O function on RA7/OSC1/CLKIN)
#pragma config WDTE = OFF       // Watchdog Timer Enable bit (WDT disabled and can be enabled by SWDTEN bit of the WDTCON register)
#pragma config PWRTE = OFF      // Power-up Timer Enable bit (PWRT disabled)
#pragma config MCLRE = OFF      // RE3/MCLR pin function select bit (RE3/MCLR pin function is digital input, MCLR internally tied to VDD)
#pragma config CP = OFF         // Code Protection bit (Program memory code protection is disabled)
#pragma config CPD = OFF        // Data Code Protection bit (Data memory code protection is disabled)
#pragma config BOREN = OFF      // Brown Out Reset Selection bits (BOR disabled)
#pragma config IESO = OFF       // Internal External Switchover bit (Internal/External Switchover mode is disabled)
#pragma config FCMEN = OFF      // Fail-Safe Clock Monitor Enabled bit (Fail-Safe Clock Monitor is disabled)
#pragma config LVP = OFF        // Low Voltage Programming Enable bit (RB3 pin has digital I/O, HV on MCLR must be used for programming)

// CONFIG2
#pragma config BOR4V = BOR40V   // Brown-out Reset Selection bit (Brown-out Reset set to 4.0V)
#pragma config WRT = OFF        // Flash Program Memory Self Write Enable bits (Write protection off)

// #pragma config statements should precede project file includes.
// Use project enums instead of #define for ON and OFF.

#include <xc.h>
#include <stdint.h>

//Variables
#define _XTAL_FREQ 1000000
#define FLAG_SPI 0xFF

uint8_t potenciometro; 

//funcion para el setup
void setup(void);

//interrupciones
void __interrupt() isr (void){
    if (PIR1bits.ADIF){             
        if (ADCON0bits.CHS == 2){  
           potenciometro = ADRESH;       
        }
        PIR1bits.ADIF = 0;          
    }
    return;      
}

// main
void main(void) {
    setup();
    
     while(1){
        if (ADCON0bits.GO == 0){    
            ADCON0bits.GO = 1;     
        }
          
        PORTAbits.RA7 = 1;      // Deshabilitamos el ss del esclavo
        __delay_ms(10);         // Delay para que el PIC pueda detectar el cambio en el pin
        PORTAbits.RA7 = 0;      // habilitamos nuevamente el escalvo

        
        SSPBUF = potenciometro;   // Cargamos valor del contador al buffer
        while(!SSPSTATbits.BF){}  // Esperamos a que termine el envio
        PORTB = potenciometro;    

   
        PORTAbits.RA7 = 1;      // Deshabilitamos el ss del esclavo
        __delay_ms(10);         // Delay para que el PIC pueda detectar el cambio en el pin
        PORTAbits.RA7 = 0;      // habilitamos nuevamente el escalvo

        SSPBUF = FLAG_SPI;      // Master inicia la comunicaci횤n y prende el clock
        while(!SSPSTATbits.BF){}// Esperamos a que se reciba un dato
        PORTD = SSPBUF;         // Mostramos dato recibido en PORTD

        __delay_ms(1000);       // Enviamos y pedimos datos cada 1 segundo
    }
    return;
}

//configuraciones en general
void setup(void){
    ANSEL = 0b00000100;            
    ANSELH = 0;                    
    
    TRISA = 0b00000101;             
    PORTA = 0;                      
    
    TRISB = 0;
    PORTB = 0;
    
    TRISD = 0;                      
    PORTD = 0;                     
    
    //config de oscilador
    OSCCONbits.IRCF = 0b0100;      
    OSCCONbits.SCS  = 1;       
    
    // Configuracion de SPI
    // Configs de Maestro
    
        TRISC = 0b00010000;         // -> SDI entrada, SCK y SD0 como salida
        PORTC = 0;
    
        // SSPCON <5:0>
        SSPCONbits.SSPM = 0b0000;   // -> SPI Maestro, Reloj -> Fosc/4 (250kbits/s)
        SSPCONbits.CKP = 0;         // -> Reloj inactivo en 0
        SSPCONbits.SSPEN = 1;       // -> Habilitamos pines de SPI
        // SSPSTAT<7:6>
        SSPSTATbits.CKE = 1;        // -> Dato enviado cada flanco de subida
        SSPSTATbits.SMP = 1;        // -> Dato al final del pulso de reloj
        SSPBUF = potenciometro;              // Enviamos un dato inicial
    
        // Configuraciones de interrupciones
        INTCONbits.GIE = 1;         
        INTCONbits.PEIE = 1;        
        PIR1bits.ADIF = 0;          
        PIE1bits.ADIE = 1;          
        
         //config del ADC
        ADCON0bits.ADCS = 0b01;     
        ADCON1bits.VCFG0 = 0;       
        ADCON1bits.VCFG1 = 0;  
        
}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

/*
 * File:   slave.c
 * Author: Irenne Cruz
 *
 * Creado: 11 de mayo, 2022
 * Ultima modificaci처n: 11 de mayo, 2022
 * 
 */

// PIC16F887 Configuration Bit Settings
// 'C' source line config statements
// CONFIG1

#pragma config FOSC = INTRC_NOCLKOUT// Oscillator Selection bits (INTOSCIO oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O function on RA7/OSC1/CLKIN)
#pragma config WDTE = OFF       // Watchdog Timer Enable bit (WDT disabled and can be enabled by SWDTEN bit of the WDTCON register)
#pragma config PWRTE = OFF      // Power-up Timer Enable bit (PWRT disabled)
#pragma config MCLRE = OFF      // RE3/MCLR pin function select bit (RE3/MCLR pin function is digital input, MCLR internally tied to VDD)
#pragma config CP = OFF         // Code Protection bit (Program memory code protection is disabled)
#pragma config CPD = OFF        // Data Code Protection bit (Data memory code protection is disabled)
#pragma config BOREN = OFF      // Brown Out Reset Selection bits (BOR disabled)
#pragma config IESO = OFF       // Internal External Switchover bit (Internal/External Switchover mode is disabled)
#pragma config FCMEN = OFF      // Fail-Safe Clock Monitor Enabled bit (Fail-Safe Clock Monitor is disabled)
#pragma config LVP = OFF        // Low Voltage Programming Enable bit (RB3 pin has digital I/O, HV on MCLR must be used for programming)

// CONFIG2
#pragma config BOR4V = BOR40V   // Brown-out Reset Selection bit (Brown-out Reset set to 4.0V)
#pragma config WRT = OFF        // Flash Program Memory Self Write Enable bits (Write protection off)

// #pragma config statements should precede project file includes.
// Use project enums instead of #define for ON and OFF.

#include <xc.h>
#include <stdint.h>

//variables
#define _XTAL_FREQ 1000000
#define FLAG_SPI 0xFF

char cont_slave1 = 0;
char val_temporal = 0;

//funcion para el setup
void setup(void);

//interrupciones
void __interrupt() isr (void){
    if (PIR1bits.SSPIF){
        
        val_temporal = SSPBUF;
        if (val_temporal == FLAG_SPI){  //revisa si es el dato de inicio
            SSPBUF = cont_slave1;        // respondemos con un 0x33 - "ok"
        }
        if (val_temporal != FLAG_SPI){  // revisa si es un dato
            PORTD = val_temporal;       // guardamos el dato en PORTD
        }
        PIR1bits.SSPIF = 0;             // Limpiamos bandera de interrupci처n?
    }
    if(INTCONbits.RBIF){
        if (!PORTBbits.RB0){             // REVISAR SI RB0 FUE PRESIONADO
            cont_slave1++;                  // INCREMENTAR PORTA
        }
        else if(!PORTBbits.RB1){         // REVISAR SI RB1 FUE PRESIONADO
            cont_slave1--;            // DECREMENTAR PORTA
        }
        INTCONbits.RBIF = 0;    // LIMPIAR BANDERA DE INTERRUPCION EN PORTB
    }
    return;
}

//main
void main(void) {
    setup();
    while(1){}
    return;
}

//configuraciones en general
void setup(void){
    ANSEL = 0;
    ANSELH = 0;
    
    TRISB = 0;
    PORTB = 0;
    
    TRISD = 0;
    PORTD = 0;
    
    TRISA = 0b10100001;
    PORTA = 0;
    
    OSCCONbits.IRCF = 0b0100;    
    OSCCONbits.SCS = 1;         // Reloj interno
    
    // Configuracion de SPI
    // Configs del slave
    
    TRISC = 0b00011000; 
    PORTC = 0;

    // SSPCON <5:0>
    SSPCONbits.SSPM = 0b0100;   // -> SPI Esclavo, SS hablitado
    SSPCONbits.CKP = 0;         // -> Reloj inactivo en 0
    SSPCONbits.SSPEN = 1;       // -> Habilitamos pines de SPI
    // SSPSTAT<7:6>
    SSPSTATbits.CKE = 1;        // -> Dato enviado cada flanco de subida
    SSPSTATbits.SMP = 0;        // -> Dato al final del pulso de reloj

    //configuraciones e pushbuttons
    TRISBbits.TRISB0 = 1;       // RB0 COMO INPUT
    TRISBbits.TRISB1 = 1;       // RB1 COMO INPUT
    OPTION_REGbits.nRBPU = 0;   // HABILITAR WEAK PULLUP EN PUERTO B
    WPUBbits.WPUB0 = 1;         // HABILITAR RESISTENCIA EN RB0
    WPUBbits.WPUB1 = 1;         // HABILITAR RESISTENCIA EN RB1
    
    PIR1bits.SSPIF = 0;         // LIMPIAR BANDERA DE INTERRUPCIONES DE SP1
    PIE1bits.SSPIE = 1;         // ACTIVAR INTERRUPCIONES DE SPI
    INTCONbits.GIE = 1;         // ACTIVAR INTERRUPCIONES GLOBALES
    INTCONbits.PEIE = 1;        // ACTIVAR INTERRUPCIONES DE PERIFERICOS
    INTCONbits.RBIE = 1;        // HABILITAR INTERRUPCIONES EN PORTB
    IOCBbits.IOCB0 = 1;         // HABILITAR INTERRUPCION EN CAMBIO PARA RB0
    IOCBbits.IOCB1 = 1;         // HABILITAR INTERRUPCION EN CAMBIO PARA RB1
    INTCONbits.RBIF = 0;        // LIMPIAR BANDERA DE INTERRUPCION EN PORTB
}
