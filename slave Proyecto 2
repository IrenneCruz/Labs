/*
 * File:   slave.c
 * Author: Irenne Cruz
 *
 * Creado: 5 de junio, 2022
 * Última modificación: 5 de junio, 2022
 * 
 */

// PIC16F887 Configuration Bit Settings
// 'C' source line config statements

// CONFIG1
#pragma config FOSC = INTRC_NOCLKOUT// Oscillator Selection bits (INTOSCIO oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O function on RA7/OSC1/CLKIN)
#pragma config WDTE = OFF       // Watchdog Timer Enable bit (WDT disabled and can be enabled by SWDTEN bit of the WDTCON register)
#pragma config PWRTE = OFF      // Power-up Timer Enable bit (PWRT disabled)
#pragma config MCLRE = OFF      // RE3/MCLR pin function select bit (RE3/MCLR pin function is digital input, MCLR internally tied to VDD)
#pragma config CP = OFF         // Code Protection bit (Program memory code protection is disabled)
#pragma config CPD = OFF        // Data Code Protection bit (Data memory code protection is disabled)
#pragma config BOREN = OFF      // Brown Out Reset Selection bits (BOR disabled)
#pragma config IESO = OFF       // Internal External Switchover bit (Internal/External Switchover mode is disabled)
#pragma config FCMEN = OFF      // Fail-Safe Clock Monitor Enabled bit (Fail-Safe Clock Monitor is disabled)
#pragma config LVP = OFF        // Low Voltage Programming Enable bit (RB3 pin has digital I/O, HV on MCLR must be used for programming)

// CONFIG2
#pragma config BOR4V = BOR40V   // Brown-out Reset Selection bit (Brown-out Reset set to 4.0V)
#pragma config WRT = OFF        // Flash Program Memory Self Write Enable bits (Write protection off)

// #pragma config statements should precede project file includes.
// Use project enums instead of #define for ON and OFF.

#include <xc.h>
#include <stdint.h>
#define _XTAL_FREQ 4000000

//Potenciometros manuales

#define IN_MIN 0            //Valor mínimo de entrada del potenciometro 
#define IN_MAX 255          //Valor máximo de entrada del potenciometro
#define OUT_MIN 13         //Valor mínimo de ancho de pulso de señal PWM
#define OUT_MAX 80         //Valor máximo de ancho de pulso de la señal PWM

unsigned short CCPR = 0;        //Variable para almacenar ancho de pulso al hacer la interpolación lineal (CCP1)
unsigned short CCPRA = 0;       //Variable para almacenar ancho de pulso al hacer la interpolación lineal (CCP2)

void setup (void);

//mapeo
unsigned short map(uint8_t val, uint8_t in_min, uint8_t in_max, 
            unsigned short out_min, unsigned short out_max);

//interrupciones
void __interrupt() isr (void){
    if(PIR1bits.SSPIF){ 
        if(PORTAbits.RA0 == 1){
            PORTB = SSPBUF;              // Guardar valor de primer pot
            CCPR = map(SSPBUF, IN_MIN, IN_MAX, OUT_MIN, OUT_MAX);       // InterpolaciÛn de datos
            CCPR1L = (uint8_t)(CCPR>>2);            // 6 bits a reg CCPR1L
            CCP1CONbits.DC1B = CCPR & 0b11;         // 2 bits a DC1B
        } 
         
        else if (PORTAbits.RA1 == 1){
            PORTD = SSPBUF;              // Guarda valor de segundo pot
            CCPRA = map(SSPBUF, IN_MIN, IN_MAX, OUT_MIN, OUT_MAX);           // InterpolaciÛn de datos
            CCPR2L = (uint8_t)(CCPRA>>2);            // 8 bits guardados en CCPR1L
            CCP2CONbits.DC2B0 = CCPRA & 0b01;       
            CCP2CONbits.DC2B1 = CCPRA & 0b10; 
        }
        PIR1bits.SSPIF = 0;         // Limpiar bandera de int.
    }
    return;
}

//ciclo principal
void main (void){
    setup();
    while(1){
    }
    return;
}

//configuraciones
void setup (void){
    ANSEL = 0;
    ANSELH = 0;
    
    TRISB = 0;
    PORTB = 0;
    
    TRISD = 0;
    PORTD = 0;
    
    TRISA = 0b00100011;   //RA0, RA1, RA5 como entradas para interconexion con master
    PORTA = 0;

    // Configuración reloj interno
    OSCCONbits.IRCF = 0b0011;    // 500 kHz
    OSCCONbits.SCS = 1;         // Reloj interno
    
    
    // configuración del SPI
    // configuraciones del slave
    TRISCbits.TRISC2 = 1;           // CCP1 como entrada
    TRISCbits.TRISC1 = 1;           // CCP2 como entrada
    TRISCbits.TRISC3 = 1;           // SCK entrada
    TRISCbits.TRISC4 = 1;           // SDI entrada
    TRISCbits.TRISC5 = 0;           // SDO salida
    PORTC = 0;
    
    // SSPCON <5:0>
    SSPCONbits.SSPM = 0b0100;   // -> SPI Esclavo, SS hablitado
    SSPCONbits.CKP = 0;         // -> Reloj inactivo en 0
    SSPCONbits.SSPEN = 1;       // -> Habilitamos pines de SPI
    
    // SSPSTAT<7:6>
    SSPSTATbits.CKE = 1;        // -> Dato enviado cada flanco de subida
    SSPSTATbits.SMP = 0;        // -> Dato al final del pulso de reloj

    //interrupciones
    INTCONbits.GIE = 1;         // interrupciones globales
    INTCONbits.PEIE = 1;        // interrupciones de perifericos
    PIR1bits.SSPIF = 0;         // limpiar bandera de interrupciones de SPI
    PIE1bits.SSPIE = 1;         // interrupciones de SPI
    
    //PWM CONFIG
    TRISCbits.TRISC2 = 1;           // CCP1 entrada 
    TRISCbits.TRISC1 = 1;           // CCP2 entrada 
    PR2 = 156;                      // periodo del timer2 20ms

    CCP1CON = 0;                    // CCP1 off
    CCP2CON = 0;                    // CCP2 off
    CCP1CONbits.P1M = 0;            // single output
    CCP1CONbits.CCP1M = 0b1100;     // PWM para CCP1
    CCP2CONbits.CCP2M = 0b1100;     // PWM para CCP2

    CCPR1L = 155>>2;                // ancho de pulso para CCP1
    CCP1CONbits.DC1B = 155 & 0b11;  
    CCPR2L = 155>>2;                // ancho de pulso para CCP2
    CCP2CONbits.DC2B0 = 155 & 0b01; 
    CCP2CONbits.DC2B1 = 155 & 0b10; 


    T2CONbits.T2CKPS = 0b11;        // prescaler del timer2 en 1:16
    PIR1bits.TMR2IF = 0;            // limpiar bandera de interrupcion de timer2
    T2CONbits.TMR2ON = 1;           // timer2 encendido
    while(!PIR1bits.TMR2IF);        // timer2 en espera
    PIR1bits.TMR2IF = 0;            // limpiar bandera de interrupcion de timer2

    TRISCbits.TRISC2 = 0;
    TRISCbits.TRISC1 = 0;
    return;
}

//mapeo de datos
unsigned short map(uint8_t x, uint8_t x0, uint8_t x1, 
            unsigned short y0, unsigned short y1){
    return (unsigned short)(y0+((float)(y1-y0)/(x1-x0))*(x-x0));
}
