/*
 * File:   lab12.c
 * Author: Irenne Cruz
 *
 * Creado: 18 de mayo, 2022
 * Ultima modificación: 18 de mayo, 2022
 * 
 */

// PIC16F887 Configuration Bit Settings
// 'C' source line config statements

// CONFIG1
#pragma config FOSC = INTRC_NOCLKOUT// Oscillator Selection bits (INTOSCIO oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O function on RA7/OSC1/CLKIN)
#pragma config WDTE = OFF       // Watchdog Timer Enable bit (WDT disabled and can be enabled by SWDTEN bit of the WDTCON register)
#pragma config PWRTE = OFF      // Power-up Timer Enable bit (PWRT disabled)
#pragma config MCLRE = OFF      // RE3/MCLR pin function select bit (RE3/MCLR pin function is digital input, MCLR internally tied to VDD)
#pragma config CP = OFF         // Code Protection bit (Program memory code protection is disabled)
#pragma config CPD = OFF        // Data Code Protection bit (Data memory code protection is disabled)
#pragma config BOREN = OFF      // Brown Out Reset Selection bits (BOR disabled)
#pragma config IESO = OFF       // Internal External Switchover bit (Internal/External Switchover mode is disabled)
#pragma config FCMEN = OFF      // Fail-Safe Clock Monitor Enabled bit (Fail-Safe Clock Monitor is disabled)
#pragma config LVP = OFF        // Low Voltage Programming Enable bit (RB3 pin has digital I/O, HV on MCLR must be used for programming)

// CONFIG2
#pragma config BOR4V = BOR40V   // Brown-out Reset Selection bit (Brown-out Reset set to 4.0V)
#pragma config WRT = OFF        // Flash Program Memory Self Write Enable bits (Write protection off)

// #pragma config statements should precede project file includes.
// Use project enums instead of #define for ON and OFF.

#include <xc.h>
#include <stdint.h>

//variables
#define _XTAL_FREQ 1000000 
uint8_t potenciometro = 0;  
uint8_t adress = 0x01;
int modo_sleep = 0;                  

//funcion para el setup
void setup(void);
uint8_t read_EEPROM(uint8_t adress);               
void write_EEPROM(uint8_t adress, uint8_t data);   

//interrupciones
void __interrupt() isr(void){
   
    if (PIR1bits.ADIF){             
        if (ADCON0bits.CHS == 0){   
           potenciometro = ADRESH;       
           PORTC = potenciometro;
        }
        PIR1bits.ADIF = 0;         
    }
    if (INTCONbits.RBIF){           
        if (PORTBbits.RB0 == 0){    
            modo_sleep = 0;           // el modo sleep se deactiva con pushbutton en RB0
            PORTEbits.RE0 = 0;     
        }
        else if (PORTBbits.RB1 == 0){   
            modo_sleep = 1;           // el modo sleep se activa con el pushbutton en RB1
            PORTEbits.RE0 = 1;     
            SLEEP();                  // pic en modo sleep
        }                   
        else if (PORTBbits.RB2 == 0){
            modo_sleep = 0;           // el modo sleep se despierta 
            PORTEbits.RE0 = 0;         
            write_EEPROM(adress, potenciometro);  // el dato se escribe en la EEPROM
        }
        INTCONbits.RBIF = 0;         // LIMPIAR BANDERA DE INTERRUPCION EN PORTB
    }
    return;
}

//main
void main(void) {
    setup();
    while(1){
        if (modo_sleep == 0){            
            if (ADCON0bits.GO == 0){    
                ADCON0bits.GO = 1;      
                __delay_us(40);         
            }
        }
        PORTD = read_EEPROM(adress);     // el puerto muestra la escritura de la EEPROM
    }
}

//configuraciones en general
void setup(void){
    ANSEL = 0b00000001;             // AN1 entrada analógica
    ANSELH = 0;                     // I/O DIGITALES

    TRISA = 0b00000001;             // RA1 in
    PORTA = 0;                      

    TRISC = 0;                      // portc out
    PORTC = 0;                      
    
    TRISD = 0;                      // portd out
    PORTD = 0;                      
    
    TRISE = 0;                      // porte out
    PORTE = 0;                     

    OSCCONbits.IRCF = 0b0100;       
    OSCCONbits.SCS  = 1;            // reloj interno
    
    //interrupciones
    INTCONbits.GIE = 1;            
    INTCONbits.PEIE = 1;           
    INTCONbits.RBIE = 1;            
    IOCBbits.IOCB0 = 1;            
    IOCBbits.IOCB1 = 1;  
    IOCBbits.IOCB2 = 1;
    INTCONbits.RBIF = 0;           
    PIR1bits.ADIF = 0;              
    PIE1bits.ADIE = 1;             

    //configuraciones de pushbuttons
    TRISBbits.TRISB0 = 1;           // RB0 in
    TRISBbits.TRISB1 = 1;           // RB1 in
    TRISBbits.TRISB2 = 1;           // RB2 in
    OPTION_REGbits.nRBPU = 0; 
   
    WPUBbits.WPUB0 = 1;            
    WPUBbits.WPUB1 = 1;      
    WPUBbits.WPUB2 = 1;         
    
    //configuración de ADC
    ADCON0bits.ADCS = 0b01;         // FOSC/8
    ADCON1bits.VCFG0 = 0;           // VDD voltaje de referencia interno
    ADCON1bits.VCFG1 = 0;           // VSS voltaje interno

    ADCON0bits.CHS = 0b0000;        // AN0 entrada de adc
    ADCON1bits.ADFM = 0;            
    ADCON0bits.ADON = 1;            
    __delay_us(40);               
}

uint8_t read_EEPROM(uint8_t adress){   
    EEADR = adress;                 
    EECON1bits.EEPGD = 0;   // Lectura a la EEPROM
    EECON1bits.RD = 1;      // Obtenemos dato de la EEPROM
    return EEDAT;           // Regresamos dato      
}

void write_EEPROM(uint8_t adress, uint8_t data){   
    EEADR = adress;                 
    EEDAT = data;                   
    EECON1bits.EEPGD = 0;       // Escritura a la EEPROM
    EECON1bits.WREN = 1;        // Habilitamos escritura en la EEPROM
    
    INTCONbits.GIE = 0;         // Deshabilitamos interrupciones
    EECON2 = 0x55;      
    EECON2 = 0xAA;
    
    EECON1bits.WR = 1;          // Iniciamos escritura
    
    EECON1bits.WREN = 0;        // Deshabilitamos escritura en la EEPROM
    INTCONbits.RBIF = 0;
    INTCONbits.GIE = 1;         // Habilitamos interrupciones
}

