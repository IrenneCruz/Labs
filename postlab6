; Archivo:	postlab6.s
; Dispositivo:	PIC16F887
; Autor:	Irenne Cruz
; Compilador:	pic-as (v2. 30), MPLABX V5. 40
;    
; Porgrama: timer1 aumentando una variable y displays mostrando conteo
; Hardware: LEDs en puerto A, puerto C y Displays puerto D
    
; Creado: 2 mar, 2022
; Última modificación: 5 mar, 2022
    
PROCESSOR 16F887
#include <xc.inc>

;configuracion de word 1
 CONFIG FOSC = INTRC_NOCLKOUT	; oscilador interno sin salidas
 CONFIG WDTE = OFF  ; reinicio repititivo del pic apagado    
 CONFIG PWRTE = OFF ; no espera de 72ms al inciar habilitada
 CONFIG MCLRE = OFF ; pin MCLRE se usa como In/Out
 CONFIG CP = OFF    ; sin protección de código
 CONFIG CPD = OFF   ; sin protección de datos

 CONFIG BOREN = OFF ; sin reinicio cuando el voltaje de alimentacion baja de 4V
 CONFIG IESO = OFF  ; reinicio sin cambio de reloj de interno a externo
 CONFIG FCMEN = OFF ; cambio de reloj externo a interno si hay fallo
 CONFIG LVP = OFF   ; programacion en bajo voltaje no permitida

 
; configuracion word 2
 CONFIG WRT = OFF	; poteccion autoescritura por el programa apagada
 CONFIG BOR4V = BOR40V	; reinicio abajo de 4V, (BOR21V=2.1v)
    
 restart_tmr1 macro
     movlw 0xC3
     movwf TMR1H
     movlw 0x40	    ; configuración valores iniciales del conteo
     movwf TMR1L
     bcf TMR1IF	    ; bandera
     endm 
    
 rest_tmr0 macro
     movlw 255
     movwf TMR0
     bcf T0IF
     endm
    
 sep_nibbles macro
     movf var, W
     andlw 0x0f
     movwf nibble
     swapf var, W
     andlw 0x0f
     movwf nibble+1
     endm
    
 displays macro
     movf nibble, W
     call tabla
     movwf display_var
     movf nibble+1, W
     call tabla
     movwf display_var+1
     endm    
    
 wdivl macro divisor, coci
     movwf var
     clrf var+1
     incf var+1
     movlw divisor
     subwf var, F
     btfsc CARRY
     goto $-4
     decf var+1, W
     movwf coci
     movlw divisor
     addwf var, W
     movwf resi
     endm    
    
; variables 
 PSECT udata_bank0  ; common memory
     cont: DS 2	    ; 2 byte
     var: DS 2
    
     resi: DS 1
     banderas: DS 1
     nibble: DS 2
     display_var: DS 2
    
 PSECT udata_shr    ; common memory
     W_TEMP: DS 1   ; 1 byte
     STATUS_TEMP: DS 1    
    
    
 PSECT resVect, class = CODE, abs, delta=2    
;------------vector reset------------ 
 ORG 00h
 
 resetVec:
     PAGESEL main
     goto main

     
 PSECT intVect, class = code, abs, delta=2
;-----------vector de interrupción-----------    
 ORG 04h    
 push:
     movwf W_TEMP
     swapf STATUS, W
     movwf STATUS_TEMP
    
 isr:
     btfsc TMR1IF
     call int_t1
     btfsc T0IF
     call int_t0
     btfsc TMR2IF
     call int_t2
    
 pop:    
     swapf STATUS_TEMP, W
     movwf STATUS
     swapf W_TEMP, F
     swapf W_TEMP, W
     retfie   
  
 int_t0:
     rest_tmr0
     clrf PORTB
     btfsc banderas, 0
     goto display1
     
 display0:
     movf display_var, W
     wdivl 16, PORTD
     bsf PORTB, 0
     goto next_display
     
 display1:
     movf display_var+1, W
     wdivl 16, PORTD
     bsf PORTB, 1
     
 next_display:
     movlw 1
     xorwf banderas, F
     return    
    
 int_t1:
     restart_tmr1
     incf PORTA
     movf PORTA, W
     movwf var
     sep_nibbles
     displays
     return     
    
 int_t2:
     clrf TMR2
     bcf TMR2IF
     incf PORTC
     btfsc PORTC, 1
     clrf PORTC
     return
    
     
 PSECT code, delta = 2, abs    
;------------configuracion del uC------------
 ORG 100h 
    
 tabla:
     clrf PCLATH ; clear al pclath
     bsf PCLATH, 0 ;pclath = 01
     andlw 0x0f
     addwf PCL ;PC = PCLATH + PCL
     retlw 00111111B ;0
     retlw 00000110B ;1
     retlw 01011011B ;2
     retlw 01001111B ;3
     retlw 01100110B ;4
     retlw 01101101B ;5
     retlw 01111101B ;6
     retlw 00000111B ;7
     retlw 01111111B ;8
     retlw 01101111B ;9
     retlw 01110111B ;A
     retlw 01111100B ;B
     retlw 00111001B ;C
     retlw 01011110B ;D
     retlw 01111001B ;E
     retlw 01110001B ;F 
 
 main:
     call config_io	; llamada a la subrutina de ins y out
     call config_reloj	; cnofiguración del reloj
     call config_tmr0
     call config_tmr1
     call config_tmr2
     call config_intrpt
     banksel PORTA

; loop principal
 loop:
     goto loop ; loop forever

 config_reloj:	    ;configuración del reloj con los registros del OSCCON para definir el oscilador
     banksel OSCCON
     bcf IRCF2	    ;OSCCON, 6 / bit 2 del IRCF en cet
     bsf IRCF1	    ;OSCCON, 6 / bit 1 del IRCF en set
     bsf IRCF0	    ;OSCCON, 6 / bit 0 del IRCF en set y oscilador de 4MHz configurado (110)
     bsf SCS	    ;reloj interno en set
     return
    
 config_io: ;subrutina entradas y salidas
     bsf STATUS, 5
     bsf STATUS, 6
     clrf ANSEL		; pines digitales
     clrf ANSELH 
    
     bsf STATUS, 5
     bcf STATUS, 6
     clrf TRISA		; port a como out
     bcf TRISC, 0	; port c como out
     clrf TRISD		; port d como out
     bcf TRISB, 0
     bcf TRISB, 1
    
     bcf STATUS, 5
     bcf STATUS, 6
     clrf PORTA
     clrf PORTC
     clrf PORTD
     return
    
 config_tmr0:
     banksel TRISA
     bcf T0CS
     bcf PSA
     bsf PS2
     bsf PS1
     bsf PS0
     banksel PORTA
     rest_tmr0
     bsf GIE
     bsf T0IE
     bcf T0IF
     return    
    
 config_tmr1:
     banksel PORTA
     bcf TMR1GE	    ; siempre contando0
     bsf T1CKPS1
     bsf T1CKPS0    ; presclaer 11 (1:8)
     bcf T1OSCEN    ; config del reloj interno
     bcf TMR1CS
     bsf TMR1ON	    ; encender tmr1
     restart_tmr1
     return    
    
 config_tmr2:
     banksel PORTA
     bsf TOUTPS3
     bsf TOUTPS2
     bsf TOUTPS1
     bsf TOUTPS0
     bsf TMR2ON
     bsf T2CKPS1
     bsf T2CKPS0
     banksel TRISB
     movwf 244
     movwf PR2
     clrf TMR2
     bcf TMR2IF
     return
    
 config_intrpt:
     banksel TRISA
     bsf TMR1IE	    ; interrupcion del tmr1
     bsf TMR2IE	    ; interrupcion del tmr2
     bsf T0IE
     banksel PORTA
     bcf T0IF
     bcf TMR1IF	    ; bandera 1
     bcf TMR2IF	    ; bandera 2
     bsf PEIE	    ; interrupciones perifericas
     bsf GIE	    ; habilitando las globales de ultimo
     return          
    
 END
