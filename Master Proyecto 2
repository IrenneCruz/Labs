/*
 * File:   master.c
 * Author: Irenne Cruz
 *
 * Creado: 5 de junio, 2022
 * Última modificación: 5 de junio, 2022
 * 
 */

// PIC16F887 Configuration Bit Settings
// 'C' source line config statements

// CONFIG1
#pragma config FOSC = INTRC_NOCLKOUT// Oscillator Selection bits (INTOSCIO oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O function on RA7/OSC1/CLKIN)
#pragma config WDTE = OFF       // Watchdog Timer Enable bit (WDT disabled and can be enabled by SWDTEN bit of the WDTCON register)
#pragma config PWRTE = OFF      // Power-up Timer Enable bit (PWRT disabled)
#pragma config MCLRE = OFF      // RE3/MCLR pin function select bit (RE3/MCLR pin function is digital input, MCLR internally tied to VDD)
#pragma config CP = OFF         // Code Protection bit (Program memory code protection is disabled)
#pragma config CPD = OFF        // Data Code Protection bit (Data memory code protection is disabled)
#pragma config BOREN = OFF      // Brown Out Reset Selection bits (BOR disabled)
#pragma config IESO = OFF       // Internal External Switchover bit (Internal/External Switchover mode is disabled)
#pragma config FCMEN = OFF      // Fail-Safe Clock Monitor Enabled bit (Fail-Safe Clock Monitor is disabled)
#pragma config LVP = OFF        // Low Voltage Programming Enable bit (RB3 pin has digital I/O, HV on MCLR must be used for programming)

// CONFIG2
#pragma config BOR4V = BOR40V   // Brown-out Reset Selection bit (Brown-out Reset set to 4.0V)
#pragma config WRT = OFF        // Flash Program Memory Self Write Enable bits (Write protection off)

// #pragma config statements should precede project file includes.
// Use project enums instead of #define for ON and OFF.

#include <xc.h>
#include <stdint.h>
#include <pic16f887.h>


// VARIABLES
//Potenciometros manuales
#define _XTAL_FREQ 500000
#define IN_MIN 0            //Valor mínimo de entrada del potenciometro 
#define IN_MAX 255          //Valor máximo de entrada del potenciometro
#define OUT_MIN 13         //Valor mínimo de ancho de pulso de señal PWM
#define OUT_MAX 80         //Valor máximo de ancho de pulso de la señal PWM

//Potenciometros virtuales 
#define IN_MIN_Virtual 5       //Valor minimo de entrada del potenciometro virtual
#define IN_MAX_Virtual 125     //Valor máximo de entrada del potenciometro virtual

unsigned short CCPR = 0;        //Variable para almacenar ancho de pulso al hacer la interpolación lineal (CCP1)
unsigned short CCPRA = 0;       //Variable para almacenar ancho de pulso al hacer la interpolación lineal (CCP2)

uint8_t read_EEPROM(uint8_t adress);                  // Lectura de la EEPROM
void write_EEPROM(uint8_t adress, uint8_t data);      // Escritura de la EEPROM

//variables antirrebote
uint8_t antire1 = 1; 
uint8_t antire2 = 1;
uint8_t antire3 = 1;
uint8_t antire4 = 1;
uint8_t antire5 = 1;
uint8_t antire6 = 1;

//potenciometros
uint8_t potenciometro1_in = 0; 
uint8_t potenciometro2_in = 0;
uint8_t potenciometro3_in = 0;
uint8_t potenciometro4_in = 0;

//almacenar el valor en la PC
uint8_t valor_PC = 0; 

//potenciometros virtuales
uint8_t potenciometro1_virtual = 0; 
uint8_t potenciometro2_virtual = 0;
uint8_t potenciometro3_virtual = 0;
uint8_t potenciometro4_virtual = 0;

uint8_t select_servo = 0; //seleccion de servos
uint8_t modo = 2; //bandera de estados

//mapeo
unsigned short map(uint8_t val, uint8_t in_min, uint8_t in_max, 
            unsigned short out_min, unsigned short out_max);


void setup(void);

//interrupciones
void __interrupt() isr (void){
       if(INTCONbits.RBIF){
        antire1 = 1;
        antire3 = 1;
        antire5 = 1;
        
        if (!PORTBbits.RB0){    //si se presiona RB0, es decir cambiar de modo
            antire1 = 0;
            antire2 = antire1;        
        }
        if (antire2 != antire1){   //una vez RB0 ya no esté presionado, se libera, se cambia de modo
            antire2 = antire1;
            modo++;
            PORTE = modo;
        }
        if (modo > 2){          //luego de presionar el botón dos veces, vuelve al modo 1 
            modo = 0;
            PORTE = modo;
        }
        
        if (modo == 0){    //si se encuentra en el modo 0, el cual es manual y guardar 
            if(!PORTBbits.RB1){                //al mantener presionado RB1
                antire3 = 0;
                antire4 = antire3;         
            }
            if (antire4 != antire3){           //Luego de liberar RB1 se realiza la acción
                antire4 = antire3;
      
                write_EEPROM(0x00, potenciometro1_in);
                __delay_ms(250);
                write_EEPROM(0x01, potenciometro2_in);
                __delay_ms(250);
                write_EEPROM(0x02, potenciometro3_in);
                __delay_ms(250);
                write_EEPROM(0x03, potenciometro4_in);
                __delay_ms(250);
                
            }
            else if(!PORTBbits.RB2){   //si no, al mantener presionado RB2 
                antire5 = 0;
                antire6 = antire5;         
            }
            if (antire6 != antire5){        //luego de liberar RB2 se realiza la acción
                antire6 = antire5;
                
                write_EEPROM(0x04, potenciometro1_in);
                __delay_ms(250);
                write_EEPROM(0x05, potenciometro2_in);
                __delay_ms(250);
                write_EEPROM(0x06, potenciometro3_in);
                __delay_ms(250);
                write_EEPROM(0x07, potenciometro4_in);
                __delay_ms(250);
            }
        }
        else if (modo == 1){     //si se ecuentra en modo 1, es decir, reproducir
            if(!PORTBbits.RB1){                //al mantener presionado RB1
                antire3 = 0;
                antire4 = antire3;         
            }
            if (antire4 != antire3){                      //luego de liberar RB2 se realiza la acción
                antire4 = antire3;
                
               //funcion del potenciometro 1
                potenciometro1_in = read_EEPROM(0x00);
                __delay_ms(50);
                CCPR = map(potenciometro1_in, IN_MIN, IN_MAX, OUT_MIN, OUT_MAX);    //interpolación del ancho de pulso
                CCPR1L = (uint8_t)(CCPR>>2);                             
                CCP1CONbits.DC1B = CCPR & 0b11; 
                __delay_ms(50);
                
                //funcion del potenciometro 2
                potenciometro2_in = read_EEPROM(0x01);
                __delay_ms(50);
                CCPRA = map(potenciometro2_in, IN_MIN, IN_MAX, OUT_MIN, OUT_MAX);   //interpolación del ancho de pulso
                CCPR2L = (uint8_t)(CCPRA>>2);                                       // se guardan los 8 bits mas significativos en CPR1L
                CCP2CONbits.DC2B0 = CCPRA & 0b01;
                CCP2CONbits.DC2B1 = CCPRA & 0b10; 
                __delay_ms(50);
                
                //funcion del potenciometro 3
                potenciometro3_in = read_EEPROM(0x02);
                PORTDbits.RD1 = 0;
                __delay_ms(50);
                PORTDbits.RD0 = 1;
                __delay_ms(50);
                SSPBUF = potenciometro3_in;
                while(!SSPSTATbits.BF);
                __delay_ms(50);
                
                //funcion del potenciometro 4
                potenciometro4_in = read_EEPROM(0x03); 
                PORTDbits.RD1 = 1;
                __delay_ms(50);
                PORTDbits.RD0 = 0;
                __delay_ms(50);
                SSPBUF = potenciometro4_in;
                while(!SSPSTATbits.BF);
            }  
            else if(!PORTBbits.RB2){                   //si no, si RB2 esta presionado
                antire5 = 0;
                antire6 = antire5;         
            }
            if (antire6 != antire5){                   //revisar si RB2 es liberado
                antire6 = antire5;
                
                //funcion del potenciometro 1
                potenciometro1_in = read_EEPROM(0x04);
                __delay_ms(250);
                CCPR = map(potenciometro1_in, IN_MIN, IN_MAX, OUT_MIN, OUT_MAX);              // interpolacion del ancho de pulso
                CCPR1L = (uint8_t)(CCPR>>2);                                        // asignar CPR1L 8 bits
                CCP1CONbits.DC1B = CCPR & 0b11;  
                __delay_ms(50);
                
                //funcion del potenciometro 2
                potenciometro2_in = read_EEPROM(0x05);
                __delay_ms(250);
                CCPRA = map(potenciometro2_in, IN_MIN, IN_MAX, OUT_MIN, OUT_MAX);             // Valor de ancho de pulso
                CCPR2L = (uint8_t)(CCPRA>>2);                                       // Guardamos los 8 bits mas significativos en CPR1L
                CCP2CONbits.DC2B0 = CCPRA & 0b01;
                CCP2CONbits.DC2B1 = CCPRA & 0b10; 
                __delay_ms(50);
                
                //funcion del potenciometro 3
                potenciometro3_in = read_EEPROM(0x06);
                __delay_ms(250);
                PORTDbits.RD2 = 0;
                __delay_ms(50);
                PORTDbits.RD1 = 1;
                __delay_ms(50);
                SSPBUF = potenciometro3_in;
                while(!SSPSTATbits.BF);
                __delay_ms(250);
                
                //funcion del potenciometro 4
                potenciometro4_in = read_EEPROM(0x07);
                __delay_ms(250);
                PORTDbits.RD2 = 1;
                __delay_ms(50);
                PORTDbits.RD1 = 0;
                __delay_ms(50);
                SSPBUF = potenciometro4_in;
                while(!SSPSTATbits.BF);
            }  
        }
        INTCONbits.RBIF = 0;                                                    //limpiar interrupciones en PORTB
    }
    if (modo == 0){
        if (PIR1bits.ADIF){
            if (ADCON0bits.CHS == 0){
                potenciometro1_in = ADRESH;
                CCPR = map(potenciometro1_in, IN_MIN, IN_MAX, OUT_MIN, OUT_MAX);              // interpolacion ancho de pulso
                CCPR1L = (uint8_t)(CCPR>>2);                                        //asignar CPR1L 8 bits
                CCP1CONbits.DC1B = CCPR & 0b11;  
            }

            else if (ADCON0bits.CHS == 1){
                potenciometro2_in = ADRESH;
                CCPRA = map(potenciometro2_in, IN_MIN, IN_MAX, OUT_MIN, OUT_MAX);             // Valor de ancho de pulso
                CCPR2L = (uint8_t)(CCPRA>>2);                                       // Guardamos los 8 bits mas significativos en CPR1L
                CCP2CONbits.DC2B0 = CCPRA & 0b01;
                CCP2CONbits.DC2B1 = CCPRA & 0b10; 
            }

            else if (ADCON0bits.CHS == 2){
                potenciometro3_in = ADRESH;
            }

            else if (ADCON0bits.CHS == 3){
                potenciometro4_in = ADRESH;
            }
            PIR1bits.ADIF = 0;  
        }
    }
    if (modo == 2){
        if (PIR1bits.RCIF){
            valor_PC = RCREG;
            if (valor_PC == 0){
                select_servo = 0;
            }
            else if (valor_PC == 1){
                select_servo = 1;
            }
            else if (valor_PC == 2){
                select_servo = 2;
            }
            else if (valor_PC == 3){
                select_servo = 3;
            }
            else if (valor_PC > 3){
                if (select_servo == 0){
                    potenciometro1_virtual = valor_PC;
                }
                else if (select_servo == 1){
                    potenciometro2_virtual = valor_PC;
                }
                else if (select_servo == 2){
                    potenciometro3_virtual = valor_PC;
                }
                else if (select_servo == 3){
                    potenciometro4_virtual = valor_PC;
                }
            }
        }
    }
}


//lectura de la EEPROM
uint8_t read_EEPROM(uint8_t adress){
    EEADR = adress;
    EECON1bits.EEPGD = 0;           //lee la EEPROM
    EECON1bits.RD = 1;              //se obtiene el dato
    return EEDAT;                   //regresa el dato a la EEPROM
}

//escritura de la EEPROM
void write_EEPROM(uint8_t adress, uint8_t data){
    EEADR = adress;
    EEDAT = data;
    EECON1bits.EEPGD = 0;           //escribe a la EEPROM
    EECON1bits.WREN = 1;            //habilita la escritura

    INTCONbits.GIE = 0;             //deshabilita las interrupciones globales
    EECON2 = 0x55;
    EECON2 = 0xAA;

    EECON1bits.WR = 1;              //inicia la escritura

    EECON1bits.WREN = 0;            //deshabilita la escritura de la EEPROM
    INTCONbits.RBIF = 0;            //limpia la bandera de interrupciones de PORTB
    INTCONbits.GIE = 1;             //habilita interrupciones globales
}

void main(void) {
    setup();
    
    //loop principal
    while (1){
        if (ADCON0bits.GO == 0){                // revisar ADC
            if (ADCON0bits.CHS == 0){           // canal anoalogico 0
                ADCON0bits.CHS = 1;             // cambio a 1
                __delay_us(40);                 
            }
            else if (ADCON0bits.CHS == 1){      // canal analogico 1
                ADCON0bits.CHS = 2;             // Cambio canal analogico a 2
                __delay_us(40);                 
            }
            else if (ADCON0bits.CHS == 2){      //canal analogico 2
                ADCON0bits.CHS = 3;             // Cambio canal analogico a 0
                __delay_us(40);                 
            }
            else if (ADCON0bits.CHS == 3){      //canal analogico 2
                ADCON0bits.CHS = 0;             //cambio canal analogico 0
                __delay_us(40);                 
            }
            __delay_us(40);                     
            ADCON0bits.GO = 1;                  //conversion
        }
        
        if (modo == 0){
            PORTAbits.RA6 = 0;
            if (PORTAbits.RA6 == 0){
                PORTDbits.RD1 = 0;
                __delay_ms(50);
                PORTDbits.RD0 = 1;
                __delay_ms(50);
                SSPBUF = potenciometro3_in;
                while(!SSPSTATbits.BF);

                PORTDbits.RD1 = 1;
                __delay_ms(50);
                PORTDbits.RD0 = 0;
                __delay_ms(50);
                SSPBUF = potenciometro4_in;
                while(!SSPSTATbits.BF);
            }
            __delay_ms(50);
        }
        
        else if (modo == 2){
            //potenciometro1 virtual linkeado con el manual
            potenciometro1_in = map(potenciometro1_virtual, IN_MIN_Virtual, IN_MAX_Virtual, IN_MIN, IN_MAX);              // mapeo
            CCPR = map(potenciometro1_in, IN_MIN, IN_MAX, OUT_MIN, OUT_MAX);              // interpolación para ancho de pulso
            CCPR1L = (uint8_t)(CCPR>>2);                                        // se asigna al CPR1L los 8 bits significativos
            CCP1CONbits.DC1B = CCPR & 0b11;  
            __delay_ms(50);
            
            //potenciometro2 virtual linkeado con el manual
            potenciometro2_in = map(potenciometro2_virtual, IN_MIN_Virtual, IN_MAX_Virtual, IN_MIN, IN_MAX);
            CCPRA = map(potenciometro2_in, IN_MIN, IN_MAX, OUT_MIN, OUT_MAX);             // Valor de ancho de pulso
            CCPR2L = (uint8_t)(CCPRA>>2);                                       // Guardamos los 8 bits mas significativos en CPR1L
            CCP2CONbits.DC2B0 = CCPRA & 0b01;
            CCP2CONbits.DC2B1 = CCPRA & 0b10; 
            __delay_ms(50);
            
            //potenciometro3 virtual linkeado con el manual
            potenciometro3_in = map(potenciometro3_virtual, IN_MIN_Virtual, IN_MAX_Virtual, IN_MIN, IN_MAX);
            PORTDbits.RD2 = 0;
            __delay_ms(50);
            PORTDbits.RD1 = 1;
            __delay_ms(50);
            SSPBUF = potenciometro3_in;
            while(!SSPSTATbits.BF);
            __delay_ms(50);
            
            //potenciometro4 virtual linkeado con el manual
            potenciometro4_in = map(potenciometro4_virtual, IN_MIN_Virtual, IN_MAX_Virtual, IN_MIN, IN_MAX);
            PORTDbits.RD2 = 1;
            __delay_ms(50);
            PORTDbits.RD1 = 0;
            __delay_ms(50);
            SSPBUF = potenciometro4_in;
            while(!SSPSTATbits.BF);
        }
        
    }
    
    return;
}

//configuraciones en general
void setup(void){
    ANSEL = 0b00001111;             // PORTA AN0, AN1, AN2 y AN3 como analógicos
    ANSELH = 0;                     // puertos digitales

    TRISA = 0b00001111;             // PORTA AN0, AN1, AN2 y AN3 como entrada
    PORTA = 0;                      // limpieza de PORTA
     
    TRISD = 0;
    PORTD = 0;                      // limpieza de PORTD
    
    TRISE = 0;
    PORTE = 0;                      // limpieza de PORTE
   
    PORTB = 0;                      // limpieza de PORTB
    
    TRISC = 0b00010000;             // entrada de datos del CLK y salida de datos
    PORTC = 0;                      // limpieza de PORTC

    
    //config de oscilador
    OSCCONbits.IRCF = 0b0011;       // frecuencia de 500kHz
    OSCCONbits.SCS  = 1;            // reloj interno
    
    // configuración del SPI
    // configuraciones del Master
    // SSPCON <5:0>
    SSPCONbits.SSPM = 0b0000;   // -> SPI Maestro, Reloj -> Fosc/4 (250kbits/s)
    SSPCONbits.CKP = 0;         // -> Reloj inactivo en 0
    SSPCONbits.SSPEN = 1;       // -> Habilitamos pines de SPI
    
    // SSPSTAT<7:6>
    SSPSTATbits.CKE = 1;        // -> Dato enviado cada flanco de subida
    SSPSTATbits.SMP = 1;        // -> Dato al final del pulso de reloj
    SSPBUF = 0x00;              // Enviamos un dato inicial
    
    //interrupciones
    INTCONbits.GIE = 1;         // interrupciones globales
    INTCONbits.PEIE = 1;        // interrupciones de perifericos
    PIR1bits.ADIF = 0;          // limpiar bandera de interrupciones de ADC
    PIE1bits.ADIE = 1;          // interrupciones de ADC
    
    INTCONbits.RBIE = 1;        // interrupciones en PORTB
    IOCBbits.IOCB0 = 1;         // interrupcion en RB0
    IOCBbits.IOCB1 = 1;         // interrupcion en RB1
    IOCBbits.IOCB2 = 1;         // interrupcion en RB2
    INTCONbits.RBIF = 0;        // limpiar bandera de PORTB

    //configuraciones de pushbuttons
    TRISBbits.TRISB0 = 1;           // RB0 como in
    TRISBbits.TRISB1 = 1;           // RB1 como in
    TRISBbits.TRISB2 = 1;           // RB2 como in
    OPTION_REGbits.nRBPU = 0;       // habilitar weak pullup para PORTB
    WPUBbits.WPUB0 = 1;             // resistencia en RB0
    WPUBbits.WPUB1 = 1;             // resistencia en RB1
    WPUBbits.WPUB2 = 1;             // resistencia en RB2 
   
    //configuración del ADC
    ADCON0bits.ADCS = 0b00;         // FOSC/2
    ADCON1bits.VCFG0 = 0;           // VDD como voltaje de ref interno
    ADCON1bits.VCFG1 = 0;           // VSS como voltaje de ref interno

    ADCON0bits.CHS = 0b0000;        // PORTA como entrada de ADC
    ADCON1bits.ADFM = 0;            // justiicación a la izquierda
    ADCON0bits.ADON = 1;            // habilita ADC
    __delay_us(320);                // tiempo de lectura

    //configuración de la PWM
    TRISCbits.TRISC2 = 1;           // CCP1 como in
    TRISCbits.TRISC1 = 1;           // CCP2 como in
    PR2 = 156;                      // periodo timer2 en 20mS

    //configuracion de los CCP
    CCP1CON = 0;                    // CCP1 off
    CCP2CON = 0;                    // CCP2 off
    CCP1CONbits.P1M = 0;            // single output
    CCP1CONbits.CCP1M = 0b1100;     // PWM para CCP1
    CCP2CONbits.CCP2M = 0b1100;     // PWM paraCCP2

    CCPR1L = 155>>2;                // ancho de pulso para CCP1 Y CCP2
    CCP1CONbits.DC1B = 155 & 0b11;  
    CCPR2L = 155>>2;                
    CCP2CONbits.DC2B0 = 155 & 0b01; 
    CCP2CONbits.DC2B1 = 155 & 0b10; 
    
    T2CONbits.T2CKPS = 0b11;        // prescaler del timer2 en 1:16
    PIR1bits.TMR2IF = 0;            // limpiar bandera de interrupcion de timer2
    T2CONbits.TMR2ON = 1;           // timer2 encendido
    while(!PIR1bits.TMR2IF);        // timer2 en espera
    PIR1bits.TMR2IF = 0;            // limpiar bandera de interrupcion de timer2

    TRISCbits.TRISC1 = 0;           // salida de PWM en RC1 (CCP2)
    TRISCbits.TRISC2 = 0;           // Hsalida de PWM en RC2 (CCP1)
    
    //configuración del serial
    TXSTAbits.SYNC = 0;             // modo asincrono
    TXSTAbits.BRGH = 1;             
    BAUDCTLbits.BRG16 = 1;          
    SPBRGH = 0;                     // byte superior
    SPBRG = 25;                     // baud rate aprox(9600)
    RCSTAbits.SPEN = 1;             // activar EUSART con TX/CK como salida
    TXSTAbits.TXEN = 1;             // activado de transmisor del EUSART
    TXSTAbits.TX9 = 1;              // comunicacion de 8bits
    RCSTAbits.CREN = 1;             // activado el receptor EUSART
    PIE1bits.RCIE = 1;              // activar interrupciones en receptor
    
    return;
}

unsigned short map(uint8_t x, uint8_t x0, uint8_t x1, 
            unsigned short y0, unsigned short y1){
    return (unsigned short)(y0+((float)(y1-y0)/(x1-x0))*(x-x0));
}     
