/*
 * File:   lab9.c
 * Author: Irenne Cruz
 *
 * Creado: 27 de abril, 2022
 * Ultima modificación: 27 de abril, 2022
 * Programa: leyendo un pot en puerto A y mostrando con servo en port C
 * Hardware: Servo y potenciometro
 * 
 */

// PIC16F887 Configuration Bit Settings
// 'C' source line config statements
// CONFIG1
#pragma config FOSC = INTRC_NOCLKOUT// Oscillator Selection bits (INTOSCIO oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O function on RA7/OSC1/CLKIN)
#pragma config WDTE = OFF       // Watchdog Timer Enable bit (WDT disabled and can be enabled by SWDTEN bit of the WDTCON register)
#pragma config PWRTE = OFF      // Power-up Timer Enable bit (PWRT disabled)
#pragma config MCLRE = OFF      // RE3/MCLR pin function select bit (RE3/MCLR pin function is digital input, MCLR internally tied to VDD)
#pragma config CP = OFF         // Code Protection bit (Program memory code protection is disabled)
#pragma config CPD = OFF        // Data Code Protection bit (Data memory code protection is disabled)
#pragma config BOREN = OFF      // Brown Out Reset Selection bits (BOR disabled)
#pragma config IESO = OFF       // Internal External Switchover bit (Internal/External Switchover mode is disabled)
#pragma config FCMEN = OFF      // Fail-Safe Clock Monitor Enabled bit (Fail-Safe Clock Monitor is disabled)
#pragma config LVP = OFF        // Low Voltage Programming Enable bit (RB3 pin has digital I/O, HV on MCLR must be used for programming)

// CONFIG2
#pragma config BOR4V = BOR40V   // Brown-out Reset Selection bit (Brown-out Reset set to 4.0V)
#pragma config WRT = OFF        // Flash Program Memory Self Write Enable bits (Write protection off)

// #pragma config statements should precede project file includes.
// Use project enums instead of #define for ON and OFF.

#include <xc.h>
#include <stdint.h>

// variables 
#define _XTAL_FREQ 5000000
#define IN_MIN 0                // Valor minimo de entrada del potenciometro
#define IN_MAX 255              // Valor máximo de entrada del potenciometro
#define OUT_MIN 125               // Valor mínimo de ancho de pulso de señal PWM
#define OUT_MAX 250             // Valor máximo de ancho de pulso de señal PWM

unsigned short CCPR = 0;        // Variable para almacenar ancho de pulso al hacer la interpolación lineal
unsigned short CCPRA = 0;      // Variable para almacenar ancho de pulso al hacer la interpolación lineal

//funcion para el setup
void setup(void);
unsigned short map(uint8_t val, uint8_t in_min, uint8_t in_max, 
            unsigned short out_min, unsigned short out_max);

// interrupciones
void __interrupt() isr (void)
{
       if(PIR1bits.ADIF){                    //chequea la bandera del ADC
        if(ADCON0bits.CHS == 0){            // Verificamos sea AN0 el canal seleccionado
            CCPR = map(ADRESH, IN_MIN, IN_MAX, OUT_MIN, OUT_MAX); // Valor de ancho de pulso
            CCPR1L = (uint8_t)(CCPR>>2);    // Guardamos los 8 bits mas significativos en CPR1L
            CCP1CONbits.DC1B = CCPR & 0b11; // Guardamos los 2 bits menos significativos en DC1B
        }
        else if (ADCON0bits.CHS == 1){
            CCPRA = map(ADRESH, IN_MIN, IN_MAX, OUT_MIN, OUT_MAX); // Valor de ancho de pulso
            CCPR2L = (uint8_t)(CCPRA>>2);    // Guardamos los 8 bits mas significativos en CPR1L
            CCP2CONbits.DC2B0 = CCPRA & 0b01; // Guardamos los 2 bits menos significativos en DC1B
            CCP2CONbits.DC2B1 = (CCPRA & 0b10)>>1; // Guardamos los 2 bits menos significativos en DC1B
        }
        PIR1bits.ADIF = 0;                  // Limpiamos bandera de interrupciÛn
    }
    return;
}

// Main
void main(void) {
    setup();
    
    // loop principal
    while(1){
        if(ADCON0bits.GO == 0){             // No hay proceso de conversión
            if (ADCON0bits.CHS == 0b0000){
                ADCON0bits.CHS = 0b0010;
            }
            else if (ADCON0bits.CHS == 0b0010){
                ADCON0bits.CHS = 0b0000;
            }
            __delay_us(40);
            ADCON0bits.GO = 1;              // Iniciamos proceso de conversión
        }
    }
    return;
}

//configuraciones en general
void setup(void){
    ANSEL = 0b00000101;                // AN0 como entrada analógica
    ANSELH = 0;                 // I/O digitales
    TRISA = 0b00000101;                // entrada
    TRISB = 0;
    PORTB = 0;
    PORTA = 0;
    
    // config de oscilador
    OSCCONbits.IRCF = 0b011; // a 500kHz
    OSCCONbits.SCS = 1;
    
    //config del ADC
    ADCON1bits.ADFM = 0; //justificado a la izquierda
    ADCON1bits.VCFG0 = 0; //voltaje como VDD
    ADCON1bits.VCFG1 = 0; //voltaje como VSS
    
    ADCON0bits.ADCS = 0b01; //conversion de reloj Fosc/32
    ADCON0bits.CHS = 0b0000; //canal analogico 12
    ADCON0bits.CHS = 0b0010; //canal analogico 12
    ADCON0bits.ADON = 1;
    __delay_us(40); //delay para dejar que cargue un capacitor
    
    //config del PWM
    TRISCbits.TRISC2 = 1; //RC2/CCP1 como in
    TRISCbits.TRISC1 = 1; //RC1/CCP2 como in
    PR2 = 156; //valor de PR2 para que el periodo sea superior a 2 ms
    
    // Configuración CCP
    CCP1CON = 0;                // Apagamos CCP1
    CCP1CONbits.P1M = 0; // config modo PWM
    CCP1CONbits.CCP1M = 0b1100; 
    CCP1CONbits.DC1B = 125 & 0b11;    // 0.5ms ancho de pulso / 25% ciclo de trabajo
    CCPR1L = 125>>2;
    
    CCP2CON = 0;
    CCP2CONbits.CCP2M = 0b1100; 
    CCPR2L = 125>>2;
    CCP2CONbits.DC2B0 = 125 & 0b01;    // 0.5ms ancho de pulso / 25% ciclo de trabajo
    CCP2CONbits.DC2B1 = 125 & 0b10;    // 0.5ms ancho de pulso / 25% ciclo de trabajo
    
    PIR1bits.TMR2IF = 0; //bandera
    T2CONbits.T2CKPS = 0b01;
    T2CONbits.TMR2ON = 1; //encendido de tmr2
    
    while (PIR1bits.TMR2IF == 0); //esperar 1 ciclo del tmr2
    PIR1bits.TMR2IF = 0; 
    TRISCbits.TRISC2 = 0; //salida del PWM
    TRISCbits.TRISC1 = 0; //salida del PWM
    
    //config de interrupciones
    PIR1bits.ADIF = 0; //bandera para el ADC
    PIE1bits.ADIE = 1; //interrupciones para el ADC
    INTCONbits.PEIE = 1; //habilitar inetrrupciones perifericas
    INTCONbits.GIE = 1; //habilitar todas las interrupciones
    
    return;
}


/* Función para hacer la interpolación lineal del valor de la entrada analógica 
*  usando solo el registro ADRESH (8 bits) al ancho de pulso del PWM (10 bits), 
* usando la ecuaciÛn:
*  y = y0 + [(y1 - y0)/(x1-x0)]*(x-x0)
*  -------------------------------------------------------------------
*  | x0 -> valor mÌnimo de ADC | y0 -> valor mÌnimo de ancho de pulso|
*  | x  -> valor actual de ADC | y  -> resultado de la interpolaciÛn | 
*  | x1 -> valor m·ximo de ADC | y1 -> valor m·ximo de ancho de puslo|
*  ------------------------------------------------------------------- 
*/
unsigned short map(uint8_t x, uint8_t x0, uint8_t x1, 
            unsigned short y0, unsigned short y1){
    return (unsigned short)(y0+((float)(y1-y0)/(x1-x0))*(x-x0));
}
